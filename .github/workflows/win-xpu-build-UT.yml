name: windows-build-xpu

on:
  workflow_dispatch:
    inputs:
      win_runner:
          description: Where to run the GHA job?
          type: choice
          options:
          - "icx-4434"
          - "142497"
          - "self-hosted"
      xpu_commit:
          description: 'Working commit to pass to xpu.txt'
          required: true
          type: string
            
env:
    home_dir: '%cd%\xpu_home'
    conda_env: 'xpu_venv'
    conda_path: 'C:\Users\nrvalgo_jenkinsadm\miniforge3'
    python_version: '3.10'
    USE_XPU: 1
    VS2022INSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools'

jobs:
  Preparation:
    runs-on: ["${{ inputs.win_runner }}"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.WORKFLOW_TOKEN }}
        ref: testrun
        fetch-depth: 0
        path: ${{ env.home_dir }}//actionrepo

    - name: Install oneAPI bundle
      shell: cmd
      working-directory: ${{ env.home_dir }}//actionrepo
      run: |
        echo %home_dir%
        call .ci\pytorch\win-test-helpers\installation-helpers\install_oneapi_bundle.bat

    # - name: Set conda environment
    #   shell: cmd
    #   run: |
    #     call %conda_path%\Scripts\activate.bat
    #     call conda remove -n %conda_env% --all -y
    #     call conda create -n %conda_env% python=%python_version% -y
    #     call conda activate %conda_env%
    #     call conda install cmake==3.26.4 ninja -y
    #     call conda remove ucrt -y
    #     call pip install pyyaml
    #     call conda list

  Build-whls:
    runs-on: ["${{ inputs.win_runner }}"]
    needs: [Preparation]
    steps:
    #  - name: Build Torch
    #    shell: cmd
    #    run: |
    #     call %conda_path%\Scripts\activate.bat %conda_env%
    #     call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
    #     if exist "%home_dir%\pytorch" (
    #       rmdir /s /q "%home_dir%\pytorch"
    #     )
    #     git clone https://github.com/pytorch/pytorch.git %home_dir%\pytorch > git_pytorch_repo_log.txt
    #     cd %home_dir%\pytorch
    #     set commit_number_arg=${{ inputs.xpu_commit }}
    #     python -c "import os;commit_number = os.getenv('commit_number_arg');f=open('third_party/xpu.txt', 'w');f.write(commit_number);f.close()"
    #     call conda install conda-forge::rust -y
    #     call conda install typing_extensions -y
    #     python -m pip install -r requirements.txt > pip_install_pytorch_requirements_log.txt
    #     python setup.py bdist_wheel > build_torch_wheel_log.txt
         
     - name: Build TorchVision
       shell: cmd
       run: |
        call %conda_path%\Scripts\activate.bat %conda_env%
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        set DISTUTILS_USE_SDK=1
        if exist "%home_dir%\vision" ( 
          rmdir /s /q "%home_dir%\vision"
        )
        git clone https://github.com/pytorch/vision.git %home_dir%\vision > git_vision_repo_log.txt
        cd %home_dir%\vision
        echo %home_dir%\pytorch\dist
        for %%f in (%home_dir%\pytorch\dist\torch-*.whl) do (
          set "TORCH_WHL=%%f"
          echo "INFO - torch whl found"
        )
        if defined TORCH_WHL (
          pip install %TORCH_WHL%
          echo "INFO - torch whl installed"
        ) else (
          echo "INFO - No torch whl found."
          exit /b 1
        )
        pip install -r docs\requirements.txt > pip_install_vision_requirements_log.txt
        echo "INFO - Building torchvision wheel"
        python setup.py bdist_wheel > build_vision_wheel_log.txt
        echo "INFO - torchvision wheel built"
        for %%f in (%home_dir%\vision\dist\torchvision-*.whl) do (
          set "TORCH_WHL=%%f"
          echo "INFO - torchvision whl found"
        )
        if defined TORCH_WHL (
          pip install %TORCH_WHL% --force-reinstall --no-deps
          echo "INFO - torchvision whl installed"
        ) else (
          echo "No torchvision whl found."
          exit /b 1
        )
        conda list

  Upload-artifacts:
    runs-on: ["${{ inputs.win_runner }}"]
    needs: [Preparation,Build-whls]
    steps:
    - name: Upload pytorch wheel
      uses: actions/upload-artifact@v2
      with:
        name: pytorch wheel
        path: '%home_dir%\pytorch\dist'

    - name: Upload torchvision wheel
      uses: actions/upload-artifact@v2
      with:
        name: torchvision wheel
        path: '%home_dir%\vision\dist'

    - name: Upload logs
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: |
          %home_dir%\pytorch\git_pytorch_repo_log.txt
          %home_dir%\pytorch\pip_install_pytorch_requirements_log.txt
          %home_dir%\pytorch\build_torch_wheel_log.txt
          %home_dir%\vision\git_vision_repo_log.txt
          %home_dir%\vision\pip_install_vision_requirements_log.txt
          %home_dir%\vision\build_vision_wheel_log.txt
