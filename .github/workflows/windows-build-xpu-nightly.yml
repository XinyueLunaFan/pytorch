name: windows-build-xpu-nightly

on:
  workflow_dispatch:
    inputs:
      win_runner:
        description: Where to run the GHA job?
        type: choice
        options:
          - "icx-4434"
          - "self-hosted"
      xpu_commit:
        description: 'Working commit to pass to xpu.txt'
        required: true
        type: string

env:
    conda_path: 'C:\Users\nrvalgo_jenkinsadm\miniforge3'
    USE_XPU: 1
    VS2022INSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools'

jobs:
  build:
    runs-on: ["${{ inputs.win_runner }}"]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.WORKFLOW_TOKEN }}
        ref: testrun
        fetch-depth: 0

    - name: Install oneAPI bundle
      shell: cmd
      run: |
        set http_proxy=http://proxy-dmz.intel.com:912
        set https_proxy=http://proxy-dmz.intel.com:912
        set no_proxy=
        if exist "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" (
          echo "oneAPI bundle already installed"
        ) else (
          echo "setvars.bat not found, installing oneAPI bundle"
          call .ci\pytorch\win-test-helpers\installation-helpers\install_oneapi_bundle.bat
          echo "oneAPI bundle installed"
        )

    - name: Set up conda environment for Python ${{ matrix.python-version }}
      shell: cmd
      run: |
        set conda_env=xpu_venv_py${{ matrix.python-version }}
        call %conda_path%\Scripts\activate.bat
        call conda remove -n %conda_env% --all -y
        call conda create -n %conda_env% python=${{ matrix.python-version }} -y
        call conda activate %conda_env%
        call pip install cmake==3.26.4 ninja
        call pip install pyyaml
        call conda list

    - name: Build Torch
      shell: cmd
      run: |
        set conda_env=xpu_venv_py${{ matrix.python-version }}
        call %conda_path%\Scripts\activate.bat %conda_env%
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        if exist "pytorch" (
          rmdir /s /q pytorch
        )
        git clone https://github.com/pytorch/pytorch.git pytorch > git_pytorch_repo_log.txt
        cd pytorch
        git checkout c8626a4e1f0553c8a9af32515555409d151a00c0
        set commit_number_arg=${{ inputs.xpu_commit }}
        python -c "import os;commit_number = os.getenv('commit_number_arg');f=open('third_party/xpu.txt', 'w');f.write(commit_number);f.close()"
        call conda install conda-forge::rust -y
        call conda install typing_extensions -y
        python -m pip install -r requirements.txt > pip_install_pytorch_requirements_log.txt
        python setup.py bdist_wheel > build_torch_wheel_log_${{ matrix.python-version }}.txt

  Upload-artifacts:
    runs-on: ["${{ inputs.win_runner }}"]
    needs: [build]
    steps:
    - name: Upload pytorch wheel
      uses: actions/upload-artifact@v2
      with:
        name: pytorch wheel [${{ matrix.python-version }}]
        path: 'pytorch\dist'

    - name: Upload logs
      uses: actions/upload-artifact@v2
      with:
        name: logs [${{ matrix.python-version }}]
        path: |
          pytorch\git_pytorch_repo_log.txt
          pytorch\pip_install_pytorch_requirements_log.txt
          pytorch\build_torch_wheel_log.txt